
STM32-Library-Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e74  08000e7c  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e74  08000e74  00010e7c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e74  08000e74  00010e7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e74  08000e7c  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e74  08000e74  00010e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e78  08000e78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  08000e7c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000e7c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010e7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ce1  00000000  00000000  00010eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000598  00000000  00000000  00012b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00013128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  000132d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002238  00000000  00000000  00013440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000182c  00000000  00000000  00015678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000099c1  00000000  00000000  00016ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00020865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000634  00000000  00000000  000208b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e5c 	.word	0x08000e5c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000e5c 	.word	0x08000e5c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <GPIO_PeriClockControl>:
#define SRC_GPIO_C_

#include "gpio.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	460b      	mov	r3, r1
 80001ee:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d136      	bne.n	8000264 <GPIO_PeriClockControl+0x80>
    {
        if(pGPIOx == GPIOA)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a38      	ldr	r2, [pc, #224]	; (80002dc <GPIO_PeriClockControl+0xf8>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d106      	bne.n	800020c <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 80001fe:	4b38      	ldr	r3, [pc, #224]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	4a37      	ldr	r2, [pc, #220]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	; 0x30
        else if(pGPIOx == GPIOE)
        {
            GPIOE_PCLK_DI();
        }
    }
}
 800020a:	e061      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOB)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a35      	ldr	r2, [pc, #212]	; (80002e4 <GPIO_PeriClockControl+0x100>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d106      	bne.n	8000222 <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 8000214:	4b32      	ldr	r3, [pc, #200]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a31      	ldr	r2, [pc, #196]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000220:	e056      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOC)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a30      	ldr	r2, [pc, #192]	; (80002e8 <GPIO_PeriClockControl+0x104>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d106      	bne.n	8000238 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 800022a:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022e:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000236:	e04b      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOD)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a2c      	ldr	r2, [pc, #176]	; (80002ec <GPIO_PeriClockControl+0x108>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d106      	bne.n	800024e <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 8000240:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024c:	e040      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOE)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a27      	ldr	r2, [pc, #156]	; (80002f0 <GPIO_PeriClockControl+0x10c>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d13c      	bne.n	80002d0 <GPIO_PeriClockControl+0xec>
            GPIOE_PCLK_EN();
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 800025c:	f043 0310 	orr.w	r3, r3, #16
 8000260:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000262:	e035      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        if(pGPIOx == GPIOA)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <GPIO_PeriClockControl+0xf8>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d106      	bne.n	800027a <GPIO_PeriClockControl+0x96>
            GPIOA_PCLK_DI();
 800026c:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a1b      	ldr	r2, [pc, #108]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000272:	f023 0301 	bic.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000278:	e02a      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOB)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <GPIO_PeriClockControl+0x100>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_PeriClockControl+0xac>
            GPIOB_PCLK_DI();
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000286:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 8000288:	f023 0302 	bic.w	r3, r3, #2
 800028c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028e:	e01f      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOC)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <GPIO_PeriClockControl+0x104>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d106      	bne.n	80002a6 <GPIO_PeriClockControl+0xc2>
            GPIOC_PCLK_DI();
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 800029e:	f023 0304 	bic.w	r3, r3, #4
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a4:	e014      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOD)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a10      	ldr	r2, [pc, #64]	; (80002ec <GPIO_PeriClockControl+0x108>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d106      	bne.n	80002bc <GPIO_PeriClockControl+0xd8>
            GPIOD_PCLK_DI();
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 80002b4:	f023 0308 	bic.w	r3, r3, #8
 80002b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ba:	e009      	b.n	80002d0 <GPIO_PeriClockControl+0xec>
        else if(pGPIOx == GPIOE)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <GPIO_PeriClockControl+0x10c>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d105      	bne.n	80002d0 <GPIO_PeriClockControl+0xec>
            GPIOE_PCLK_DI();
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <GPIO_PeriClockControl+0xfc>)
 80002ca:	f023 0310 	bic.w	r3, r3, #16
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020800 	.word	0x40020800
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	40021000 	.word	0x40021000

080002f4 <ConvertPortToCodeEXTI>:
uint8_t ConvertPortToCodeEXTI(GPIO_RegDef_t *pGPIOx){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	// return portcode, for example, GPIOA = 0; GPIOB = 1, refer chapter 7.2.4
	if(pGPIOx == GPIOA){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a11      	ldr	r2, [pc, #68]	; (8000344 <ConvertPortToCodeEXTI+0x50>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d101      	bne.n	8000308 <ConvertPortToCodeEXTI+0x14>
		return 0;
 8000304:	2300      	movs	r3, #0
 8000306:	e017      	b.n	8000338 <ConvertPortToCodeEXTI+0x44>
	}
	else if(pGPIOx == GPIOB){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <ConvertPortToCodeEXTI+0x54>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d101      	bne.n	8000314 <ConvertPortToCodeEXTI+0x20>
		return 1;
 8000310:	2301      	movs	r3, #1
 8000312:	e011      	b.n	8000338 <ConvertPortToCodeEXTI+0x44>
	}else if(pGPIOx == GPIOC){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a0d      	ldr	r2, [pc, #52]	; (800034c <ConvertPortToCodeEXTI+0x58>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d101      	bne.n	8000320 <ConvertPortToCodeEXTI+0x2c>
		return 2;
 800031c:	2302      	movs	r3, #2
 800031e:	e00b      	b.n	8000338 <ConvertPortToCodeEXTI+0x44>
	}else if(pGPIOx == GPIOD){
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <ConvertPortToCodeEXTI+0x5c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d101      	bne.n	800032c <ConvertPortToCodeEXTI+0x38>
		return 3;
 8000328:	2303      	movs	r3, #3
 800032a:	e005      	b.n	8000338 <ConvertPortToCodeEXTI+0x44>
	}else if(pGPIOx == GPIOE){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <ConvertPortToCodeEXTI+0x60>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d101      	bne.n	8000338 <ConvertPortToCodeEXTI+0x44>
		return 4;
 8000334:	2304      	movs	r3, #4
 8000336:	e7ff      	b.n	8000338 <ConvertPortToCodeEXTI+0x44>
	}
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40020000 	.word	0x40020000
 8000348:	40020400 	.word	0x40020400
 800034c:	40020800 	.word	0x40020800
 8000350:	40020c00 	.word	0x40020c00
 8000354:	40021000 	.word	0x40021000

08000358 <GPIO_Init>:
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
	//1. config mode of gpio pin

	GPIO_PeriClockControl(pGPIOHandle ->pGPIOx, ENABLE);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2101      	movs	r1, #1
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff3a 	bl	80001e4 <GPIO_PeriClockControl>
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){ //not interupt mode
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	795b      	ldrb	r3, [r3, #5]
 8000374:	2b03      	cmp	r3, #3
 8000376:	d824      	bhi.n	80003c2 <GPIO_Init+0x6a>
		temp |= pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	461a      	mov	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	791b      	ldrb	r3, [r3, #4]
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	461a      	mov	r2, r3
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	4313      	orrs	r3, r2
 800038e:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	4619      	mov	r1, r3
 800039c:	2303      	movs	r3, #3
 800039e:	408b      	lsls	r3, r1
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
		temp = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	e093      	b.n	80004ea <GPIO_Init+0x192>
	}
	else{ //interupt mode, code later. Focus on SYSCFG register (Chapter 7) , then go to EXTI register (chapter 10) to config Rising edge or falling edge
		//1. Config FTRS
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	d117      	bne.n	80003fa <GPIO_Init+0xa2>

			 EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET
 80003ca:	4b92      	ldr	r3, [pc, #584]	; (8000614 <GPIO_Init+0x2bc>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	7912      	ldrb	r2, [r2, #4]
 80003d2:	4611      	mov	r1, r2
 80003d4:	2201      	movs	r2, #1
 80003d6:	408a      	lsls	r2, r1
 80003d8:	43d2      	mvns	r2, r2
 80003da:	4611      	mov	r1, r2
 80003dc:	4a8d      	ldr	r2, [pc, #564]	; (8000614 <GPIO_Init+0x2bc>)
 80003de:	400b      	ands	r3, r1
 80003e0:	60d3      	str	r3, [r2, #12]
			 EXTI->FTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e2:	4b8c      	ldr	r3, [pc, #560]	; (8000614 <GPIO_Init+0x2bc>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7912      	ldrb	r2, [r2, #4]
 80003ea:	4611      	mov	r1, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	408a      	lsls	r2, r1
 80003f0:	4611      	mov	r1, r2
 80003f2:	4a88      	ldr	r2, [pc, #544]	; (8000614 <GPIO_Init+0x2bc>)
 80003f4:	430b      	orrs	r3, r1
 80003f6:	60d3      	str	r3, [r2, #12]
 80003f8:	e04c      	b.n	8000494 <GPIO_Init+0x13c>

		}
		//1. Config RTRS
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	2b05      	cmp	r3, #5
 8000400:	d117      	bne.n	8000432 <GPIO_Init+0xda>
			 EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET
 8000402:	4b84      	ldr	r3, [pc, #528]	; (8000614 <GPIO_Init+0x2bc>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7912      	ldrb	r2, [r2, #4]
 800040a:	4611      	mov	r1, r2
 800040c:	2201      	movs	r2, #1
 800040e:	408a      	lsls	r2, r1
 8000410:	43d2      	mvns	r2, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a7f      	ldr	r2, [pc, #508]	; (8000614 <GPIO_Init+0x2bc>)
 8000416:	400b      	ands	r3, r1
 8000418:	6093      	str	r3, [r2, #8]
			 EXTI->RTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800041a:	4b7e      	ldr	r3, [pc, #504]	; (8000614 <GPIO_Init+0x2bc>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7912      	ldrb	r2, [r2, #4]
 8000422:	4611      	mov	r1, r2
 8000424:	2201      	movs	r2, #1
 8000426:	408a      	lsls	r2, r1
 8000428:	4611      	mov	r1, r2
 800042a:	4a7a      	ldr	r2, [pc, #488]	; (8000614 <GPIO_Init+0x2bc>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	e030      	b.n	8000494 <GPIO_Init+0x13c>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	2b06      	cmp	r3, #6
 8000438:	d12c      	bne.n	8000494 <GPIO_Init+0x13c>
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043a:	4b76      	ldr	r3, [pc, #472]	; (8000614 <GPIO_Init+0x2bc>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	7912      	ldrb	r2, [r2, #4]
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	43d2      	mvns	r2, r2
 800044a:	4611      	mov	r1, r2
 800044c:	4a71      	ldr	r2, [pc, #452]	; (8000614 <GPIO_Init+0x2bc>)
 800044e:	400b      	ands	r3, r1
 8000450:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000452:	4b70      	ldr	r3, [pc, #448]	; (8000614 <GPIO_Init+0x2bc>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	7912      	ldrb	r2, [r2, #4]
 800045a:	4611      	mov	r1, r2
 800045c:	2201      	movs	r2, #1
 800045e:	408a      	lsls	r2, r1
 8000460:	4611      	mov	r1, r2
 8000462:	4a6c      	ldr	r2, [pc, #432]	; (8000614 <GPIO_Init+0x2bc>)
 8000464:	430b      	orrs	r3, r1
 8000466:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000468:	4b6a      	ldr	r3, [pc, #424]	; (8000614 <GPIO_Init+0x2bc>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	4611      	mov	r1, r2
 8000472:	2201      	movs	r2, #1
 8000474:	408a      	lsls	r2, r1
 8000476:	4611      	mov	r1, r2
 8000478:	4a66      	ldr	r2, [pc, #408]	; (8000614 <GPIO_Init+0x2bc>)
 800047a:	430b      	orrs	r3, r1
 800047c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047e:	4b65      	ldr	r3, [pc, #404]	; (8000614 <GPIO_Init+0x2bc>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7912      	ldrb	r2, [r2, #4]
 8000486:	4611      	mov	r1, r2
 8000488:	2201      	movs	r2, #1
 800048a:	408a      	lsls	r2, r1
 800048c:	4611      	mov	r1, r2
 800048e:	4a61      	ldr	r2, [pc, #388]	; (8000614 <GPIO_Init+0x2bc>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6093      	str	r3, [r2, #8]
//	    case 3:
//	    	SYSCFG->EXTICR[3] |= (ConvertPortToCodeEXTI(pGPIOHandle->pGPIOx) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
//	    	break;
//
//	    }
		uint8_t chooseEXTIReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // choose which EXTICR register is used 0,1,2,3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	089b      	lsrs	r3, r3, #2
 800049a:	72fb      	strb	r3, [r7, #11]
		uint8_t chooseEXTILine = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	f003 0303 	and.w	r3, r3, #3
 80004a4:	72bb      	strb	r3, [r7, #10]

	    SYSCFG->EXTICR[chooseEXTIReg] |= (ConvertPortToCodeEXTI(pGPIOHandle->pGPIOx) << chooseEXTILine * 4);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff22 	bl	80002f4 <ConvertPortToCodeEXTI>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461a      	mov	r2, r3
 80004b4:	7abb      	ldrb	r3, [r7, #10]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	fa02 f103 	lsl.w	r1, r2, r3
 80004bc:	4a56      	ldr	r2, [pc, #344]	; (8000618 <GPIO_Init+0x2c0>)
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	3302      	adds	r3, #2
 80004c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004c6:	4608      	mov	r0, r1
 80004c8:	4953      	ldr	r1, [pc, #332]	; (8000618 <GPIO_Init+0x2c0>)
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	4302      	orrs	r2, r0
 80004ce:	3302      	adds	r3, #2
 80004d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable interupt using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	4b4f      	ldr	r3, [pc, #316]	; (8000614 <GPIO_Init+0x2bc>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a4b      	ldr	r2, [pc, #300]	; (8000614 <GPIO_Init+0x2bc>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6013      	str	r3, [r2, #0]

	}

	//2. config the speed
	temp |= pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	799b      	ldrb	r3, [r3, #6]
 80004ee:	461a      	mov	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4313      	orrs	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	4619      	mov	r1, r3
 800050e:	2303      	movs	r3, #3
 8000510:	408b      	lsls	r3, r1
 8000512:	43db      	mvns	r3, r3
 8000514:	4619      	mov	r1, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	400a      	ands	r2, r1
 800051c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6899      	ldr	r1, [r3, #8]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	430a      	orrs	r2, r1
 800052c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]

	//3. config pudp setting
	temp |= pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	79db      	ldrb	r3, [r3, #7]
 8000536:	461a      	mov	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	791b      	ldrb	r3, [r3, #4]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	461a      	mov	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4313      	orrs	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	4619      	mov	r1, r3
 8000556:	2303      	movs	r3, #3
 8000558:	408b      	lsls	r3, r1
 800055a:	43db      	mvns	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	400a      	ands	r2, r1
 8000564:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68d9      	ldr	r1, [r3, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	430a      	orrs	r2, r1
 8000574:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]

	//4. config outputtype
	temp |= pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7a1b      	ldrb	r3, [r3, #8]
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4313      	orrs	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	4619      	mov	r1, r3
 800059e:	2303      	movs	r3, #3
 80005a0:	408b      	lsls	r3, r1
 80005a2:	43db      	mvns	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	400a      	ands	r2, r1
 80005ac:	615a      	str	r2, [r3, #20]
	pGPIOHandle->pGPIOx->ODR |= temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6959      	ldr	r1, [r3, #20]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	615a      	str	r2, [r3, #20]
	temp = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]

	//5. config alternate function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d149      	bne.n	800065e <GPIO_Init+0x306>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	2b07      	cmp	r3, #7
 80005d0:	d824      	bhi.n	800061c <GPIO_Init+0x2c4>
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 4));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6a1a      	ldr	r2, [r3, #32]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	210f      	movs	r1, #15
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	400a      	ands	r2, r1
 80005ee:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a1a      	ldr	r2, [r3, #32]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7a5b      	ldrb	r3, [r3, #9]
 80005fa:	4619      	mov	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	430a      	orrs	r2, r1
 800060e:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));

		}
	}

}
 8000610:	e025      	b.n	800065e <GPIO_Init+0x306>
 8000612:	bf00      	nop
 8000614:	40013c00 	.word	0x40013c00
 8000618:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFR[1]	&= ~(0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8) * 4);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	3b08      	subs	r3, #8
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	210f      	movs	r1, #15
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	400a      	ands	r2, r1
 800063a:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7a5b      	ldrb	r3, [r3, #9]
 8000646:	4619      	mov	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	3b08      	subs	r3, #8
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	fa01 f303 	lsl.w	r3, r1, r3
 8000654:	4619      	mov	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	430a      	orrs	r2, r1
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop

08000668 <GPIO_WriteToOutputPin>:

    value = (uint16_t )pGPIOx->IDR;

    return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
 8000674:	4613      	mov	r3, r2
 8000676:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET){
 8000678:	78bb      	ldrb	r3, [r7, #2]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d109      	bne.n	8000692 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	78fa      	ldrb	r2, [r7, #3]
 8000684:	2101      	movs	r1, #1
 8000686:	fa01 f202 	lsl.w	r2, r1, r2
 800068a:	431a      	orrs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~( 1 << PinNumber );
	}
}
 8000690:	e009      	b.n	80006a6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber );
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	78fa      	ldrb	r2, [r7, #3]
 8000698:	2101      	movs	r1, #1
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	43d2      	mvns	r2, r2
 80006a0:	401a      	ands	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <SPI_PeriClockControl>:
static void SPI_TXE_InterruptHandle(SPI_Handle_t*pHandle);
static void SPI_RXE_InterruptHandle(SPI_Handle_t*pHandle);
static void SPI_OVR_ErrInterruptHandle();
static void SPI_OVR_ErrInterruptHandle(SPI_Handle_t *pSPIHandle);
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d12b      	bne.n	800071e <SPI_PeriClockControl+0x6a>
    {
        if(pSPIx == SPI1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <SPI_PeriClockControl+0xcc>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d106      	bne.n	80006dc <SPI_PeriClockControl+0x28>
        {
            SPI1_PCLK_EN();
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <SPI_PeriClockControl+0xd0>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <SPI_PeriClockControl+0xd0>)
 80006d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
        else if(pSPIx == SPI4)
        {
            SPI4_PCLK_DI();
        }
    }
}
 80006da:	e04b      	b.n	8000774 <SPI_PeriClockControl+0xc0>
        else if(pSPIx == SPI2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <SPI_PeriClockControl+0xd4>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <SPI_PeriClockControl+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a26      	ldr	r2, [pc, #152]	; (8000784 <SPI_PeriClockControl+0xd0>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006f0:	e040      	b.n	8000774 <SPI_PeriClockControl+0xc0>
        else if(pSPIx == SPI3)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <SPI_PeriClockControl+0xd8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <SPI_PeriClockControl+0x54>
            SPI3_PCLK_EN();
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SPI_PeriClockControl+0xd0>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SPI_PeriClockControl+0xd0>)
 8000700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000706:	e035      	b.n	8000774 <SPI_PeriClockControl+0xc0>
        else if(pSPIx == SPI4)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SPI_PeriClockControl+0xdc>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d131      	bne.n	8000774 <SPI_PeriClockControl+0xc0>
            SPI4_PCLK_EN();
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SPI_PeriClockControl+0xd0>)
 8000712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <SPI_PeriClockControl+0xd0>)
 8000716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800071a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800071c:	e02a      	b.n	8000774 <SPI_PeriClockControl+0xc0>
        if(pSPIx == SPI1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <SPI_PeriClockControl+0xcc>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <SPI_PeriClockControl+0x80>
            SPI1_PCLK_DI();
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SPI_PeriClockControl+0xd0>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <SPI_PeriClockControl+0xd0>)
 800072c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000732:	e01f      	b.n	8000774 <SPI_PeriClockControl+0xc0>
        else if(pSPIx == SPI2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <SPI_PeriClockControl+0xd4>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <SPI_PeriClockControl+0x96>
            SPI2_PCLK_DI();
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SPI_PeriClockControl+0xd0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <SPI_PeriClockControl+0xd0>)
 8000742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000748:	e014      	b.n	8000774 <SPI_PeriClockControl+0xc0>
        else if(pSPIx == SPI3)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a0f      	ldr	r2, [pc, #60]	; (800078c <SPI_PeriClockControl+0xd8>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <SPI_PeriClockControl+0xac>
            SPI3_PCLK_DI();
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <SPI_PeriClockControl+0xd0>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <SPI_PeriClockControl+0xd0>)
 8000758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800075e:	e009      	b.n	8000774 <SPI_PeriClockControl+0xc0>
        else if(pSPIx == SPI4)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <SPI_PeriClockControl+0xdc>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d105      	bne.n	8000774 <SPI_PeriClockControl+0xc0>
            SPI4_PCLK_DI();
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <SPI_PeriClockControl+0xd0>)
 800076a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076c:	4a05      	ldr	r2, [pc, #20]	; (8000784 <SPI_PeriClockControl+0xd0>)
 800076e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000772:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40013000 	.word	0x40013000
 8000784:	40023800 	.word	0x40023800
 8000788:	40003800 	.word	0x40003800
 800078c:	40003c00 	.word	0x40003c00
 8000790:	40013400 	.word	0x40013400

08000794 <SPI_Init>:
* Init and De-Init
* Some important register in SPI is CR1 (Control register),CR2 (For interupt mode), SR(status register), DR(Data register)
*
*/

void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	SPI_PeriClockControl(pSPIHandle -> pSPIx, ENABLE);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff86 	bl	80006b4 <SPI_PeriClockControl>
	uint32_t tempreg = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
	//1. Config master and slave mode in bit 2 MSTR. Every device is set up as slave in default
	if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_DEVICE_MODE_MASTER){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d106      	bne.n	80007c2 <SPI_Init+0x2e>
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4313      	orrs	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
	}
	//2. Config the bus Full, half or simplex
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	795b      	ldrb	r3, [r3, #5]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d104      	bne.n	80007d4 <SPI_Init+0x40>
		//if full duplex, set 0 (clear) for bit 15 BIDIMODE
		tempreg &= ~(1 << 15);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	e018      	b.n	8000806 <SPI_Init+0x72>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d104      	bne.n	80007e6 <SPI_Init+0x52>
		//if half duplex, set 1 for bit 15 BIDIMODE
		tempreg |= (1 << 15);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e00f      	b.n	8000806 <SPI_Init+0x72>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	795b      	ldrb	r3, [r3, #5]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d10b      	bne.n	8000806 <SPI_Init+0x72>
		//if simplex, we need to set bit 10 RXONLY is 1 to force the master produce clock.
		//Because in the mode RXONLY, master will receive data from slave.
		tempreg &= ~(1 << 15);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007f4:	60fb      	str	r3, [r7, #12]
        if (pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_DEVICE_MODE_MASTER) {
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d103      	bne.n	8000806 <SPI_Init+0x72>
            tempreg |= (1 << 10);  // RXONLY
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000804:	60fb      	str	r3, [r7, #12]
        }
	}
	//3. Clock speed
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << 3);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	799b      	ldrb	r3, [r3, #6]
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	461a      	mov	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	4313      	orrs	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

	//4. DFF (8 or 16 bit)
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << 11);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	79db      	ldrb	r3, [r3, #7]
 8000818:	02db      	lsls	r3, r3, #11
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4313      	orrs	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]

	//5. CPOL
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << 1);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a1b      	ldrb	r3, [r3, #8]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	461a      	mov	r2, r3
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	4313      	orrs	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

	//6. CPHA
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << 0);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7a5b      	ldrb	r3, [r3, #9]
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4313      	orrs	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]

	pSPIHandle ->pSPIx->CR1 = tempreg;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	601a      	str	r2, [r3, #0]

	pSPIHandle->pSPIx->CR1 |= (1 << 6);  // Config bit 6 SPE
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000852:	601a      	str	r2, [r3, #0]

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <SPI_SendDataInterruptMode>:


/*
* Data send and receive in Interrupt mode
*/
uint8_t SPI_SendDataInterruptMode(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Length){
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
    uint8_t state = pSPIHandle->TxState;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	75fb      	strb	r3, [r7, #23]

    if(state != SPI_BUSY_IN_TX)
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d010      	beq.n	8000896 <SPI_SendDataInterruptMode+0x3a>
    {
        /* Save Tx buffer address and length information in global variables */
        pSPIHandle->pTxBuffer = pTxBuffer;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen = Length;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	615a      	str	r2, [r3, #20]

        /* Mark SPI state as busy so that no other code can take over SPI peripheral until transmission is over */
        pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2202      	movs	r2, #2
 8000884:	61da      	str	r2, [r3, #28]
        /* Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR */
        pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000894:	605a      	str	r2, [r3, #4]
    }
    return state;
 8000896:	7dfb      	ldrb	r3, [r7, #23]
}
 8000898:	4618      	mov	r0, r3
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SPI_IRQInterruptConfig>:

/*
* IRQ Configuration and ISR handling
*/
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
    if(EnorDi == ENABLE)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d133      	bne.n	8000922 <SPI_IRQInterruptConfig+0x7e>
    {
        if(IRQNumber <= 31)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b1f      	cmp	r3, #31
 80008be:	d80a      	bhi.n	80008d6 <SPI_IRQInterruptConfig+0x32>
        {
            /* Program ISER0 register */
            *NVIC_ISER0 |= (1 << IRQNumber);
 80008c0:	4b35      	ldr	r3, [pc, #212]	; (8000998 <SPI_IRQInterruptConfig+0xf4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	2101      	movs	r1, #1
 80008c8:	fa01 f202 	lsl.w	r2, r1, r2
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a32      	ldr	r2, [pc, #200]	; (8000998 <SPI_IRQInterruptConfig+0xf4>)
 80008d0:	430b      	orrs	r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
        {
            /* Program ICER2 register (64 to 95) */
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }
}
 80008d4:	e059      	b.n	800098a <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber > 31 && IRQNumber < 64)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b1f      	cmp	r3, #31
 80008da:	d90f      	bls.n	80008fc <SPI_IRQInterruptConfig+0x58>
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b3f      	cmp	r3, #63	; 0x3f
 80008e0:	d80c      	bhi.n	80008fc <SPI_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <SPI_IRQInterruptConfig+0xf8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	f002 021f 	and.w	r2, r2, #31
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a29      	ldr	r2, [pc, #164]	; (800099c <SPI_IRQInterruptConfig+0xf8>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e046      	b.n	800098a <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber < 96)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000900:	d943      	bls.n	800098a <SPI_IRQInterruptConfig+0xe6>
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b5f      	cmp	r3, #95	; 0x5f
 8000906:	d840      	bhi.n	800098a <SPI_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <SPI_IRQInterruptConfig+0xfc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000912:	2101      	movs	r1, #1
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <SPI_IRQInterruptConfig+0xfc>)
 800091c:	430b      	orrs	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	e033      	b.n	800098a <SPI_IRQInterruptConfig+0xe6>
        if(IRQNumber <= 31)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b1f      	cmp	r3, #31
 8000926:	d80a      	bhi.n	800093e <SPI_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <SPI_IRQInterruptConfig+0x100>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f202 	lsl.w	r2, r1, r2
 8000934:	4611      	mov	r1, r2
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <SPI_IRQInterruptConfig+0x100>)
 8000938:	430b      	orrs	r3, r1
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	e025      	b.n	800098a <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber > 31 && IRQNumber < 64)
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b1f      	cmp	r3, #31
 8000942:	d90f      	bls.n	8000964 <SPI_IRQInterruptConfig+0xc0>
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b3f      	cmp	r3, #63	; 0x3f
 8000948:	d80c      	bhi.n	8000964 <SPI_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <SPI_IRQInterruptConfig+0x104>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	f002 021f 	and.w	r2, r2, #31
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	4611      	mov	r1, r2
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <SPI_IRQInterruptConfig+0x104>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e012      	b.n	800098a <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber < 96)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b3f      	cmp	r3, #63	; 0x3f
 8000968:	d90f      	bls.n	800098a <SPI_IRQInterruptConfig+0xe6>
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b5f      	cmp	r3, #95	; 0x5f
 800096e:	d80c      	bhi.n	800098a <SPI_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <SPI_IRQInterruptConfig+0x108>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	4611      	mov	r1, r2
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SPI_IRQInterruptConfig+0x108>)
 8000984:	430b      	orrs	r3, r1
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	e7ff      	b.n	800098a <SPI_IRQInterruptConfig+0xe6>
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000e104 	.word	0xe000e104
 80009a0:	e000e108 	.word	0xe000e108
 80009a4:	e000e180 	.word	0xe000e180
 80009a8:	e000e184 	.word	0xe000e184
 80009ac:	e000e188 	.word	0xe000e188

080009b0 <SPI_IRQHandling>:
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

	//For sending data
	uint8_t temp1;
	uint8_t temp2;

	temp1 = pHandle -> pSPIx->SR & (1 << 1);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle -> pSPIx->CR2 & (1 << 7);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009d2:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 ){
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <SPI_IRQHandling+0x36>
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <SPI_IRQHandling+0x36>
		SPI_TXE_InterruptHandle(pHandle);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f8a0 	bl	8000b26 <SPI_TXE_InterruptHandle>
	}
	temp1 = pHandle -> pSPIx->SR & (1 << 0);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle -> pSPIx->CR2 & (1 << 6);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a00:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 ){
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d005      	beq.n	8000a14 <SPI_IRQHandling+0x64>
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <SPI_IRQHandling+0x64>
		SPI_RXNE_InterruptHandle(pHandle);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f8c4 	bl	8000b9c <SPI_RXNE_InterruptHandle>
	}

	temp1 = pHandle -> pSPIx->SR & (1 << SPI_SR_OVR);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a20:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle -> pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 ){
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d005      	beq.n	8000a42 <SPI_IRQHandling+0x92>
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <SPI_IRQHandling+0x92>
		 SPI_OVR_ErrInterruptHandle(pHandle	);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f8ea 	bl	8000c16 <SPI_OVR_ErrInterruptHandle>
	}

}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <SPI_PeripheralControl>:
        return FLAG_SET;
    }
    return FLAG_RESET;
}
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <SPI_PeripheralControl+0x20>
    {
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8000a68:	e005      	b.n	8000a76 <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SPI_SSOEConfig>:
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
    }
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d106      	bne.n	8000aa2 <SPI_SSOEConfig+0x20>
    {
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f043 0204 	orr.w	r2, r3, #4
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	605a      	str	r2, [r3, #4]
    }
    else
    {
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
    }
}
 8000aa0:	e005      	b.n	8000aae <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f023 0204 	bic.w	r2, r3, #4
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	605a      	str	r2, [r3, #4]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <SPI_CloseTransmission>:
    temp = pSPIx->DR;
    temp = pSPIx->SR;
    (void)temp;
}
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
    pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ad0:	605a      	str	r2, [r3, #4]
    pSPIHandle->pTxBuffer = NULL;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    pSPIHandle->TxLen = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
    pSPIHandle->TxState = SPI_READY;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b06:	605a      	str	r2, [r3, #4]
    pSPIHandle->pRxBuffer = NULL;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
    pSPIHandle->RxLen = 0;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
    pSPIHandle->RxState = SPI_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SPI_TXE_InterruptHandle>:
void SPI_TXE_InterruptHandle(SPI_Handle_t *pSPIHandle)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
    if( pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF) )
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d010      	beq.n	8000b5e <SPI_TXE_InterruptHandle+0x38>
    {
        /* Load data into data register */
        /* 16 bit */
        pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	60da      	str	r2, [r3, #12]
        pSPIHandle->pTxBuffer = (uint8_t*)((uint16_t*)pSPIHandle->pTxBuffer + 1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	1c9a      	adds	r2, r3, #2
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen -= 2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	1e9a      	subs	r2, r3, #2
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	e00f      	b.n	8000b7e <SPI_TXE_InterruptHandle+0x58>

    }
    else
    {
        /* 8 bit */
        pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60da      	str	r2, [r3, #12]
        pSPIHandle->pTxBuffer++;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen--;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	1e5a      	subs	r2, r3, #1
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	615a      	str	r2, [r3, #20]

    }

    if(!pSPIHandle->TxLen)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d106      	bne.n	8000b94 <SPI_TXE_InterruptHandle+0x6e>
    {
        /* Tx is zero. Close SPI communication and inform application about it.
         * Prevents interrupts from setting up of TXE flag. */
        SPI_CloseTransmission(pSPIHandle);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff97 	bl	8000aba <SPI_CloseTransmission>
        SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f859 	bl	8000c46 <SPI_ApplicationEventCallback>
    }
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SPI_RXNE_InterruptHandle>:
void SPI_RXNE_InterruptHandle(SPI_Handle_t *pSPIHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    if( pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF) )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d011      	beq.n	8000bd6 <SPI_RXNE_InterruptHandle+0x3a>
    {
        /* Load data from data register into buffer */
        /* 16 bit */
        *((uint16_t*)pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	b292      	uxth	r2, r2
 8000bbe:	801a      	strh	r2, [r3, #0]
        pSPIHandle->pRxBuffer = (uint8_t*)((uint16_t*)pSPIHandle->pRxBuffer + 1);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	1c9a      	adds	r2, r3, #2
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	611a      	str	r2, [r3, #16]
        pSPIHandle->RxLen -= 2;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	1e9a      	subs	r2, r3, #2
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
 8000bd4:	e010      	b.n	8000bf8 <SPI_RXNE_InterruptHandle+0x5c>
    }
    else
    {
        /* 8 bit */
        *pSPIHandle->pRxBuffer = (uint8_t)pSPIHandle->pSPIx->DR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	701a      	strb	r2, [r3, #0]
        pSPIHandle->pRxBuffer++;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	611a      	str	r2, [r3, #16]
        pSPIHandle->RxLen--;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
    }

    if(!pSPIHandle->RxLen)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <SPI_RXNE_InterruptHandle+0x72>
    {
        /* Rx is zero. Close SPI communication and inform application about it.
         * Prevents interrupts from setting up of RXNE flag. */
        SPI_CloseReception(pSPIHandle);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff75 	bl	8000af0 <SPI_CloseReception>
        SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000c06:	2102      	movs	r1, #2
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f81c 	bl	8000c46 <SPI_ApplicationEventCallback>
    }
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <SPI_OVR_ErrInterruptHandle>:

void SPI_OVR_ErrInterruptHandle(SPI_Handle_t *pSPIHandle)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    /* Clear OVR flag */
    if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d007      	beq.n	8000c36 <SPI_OVR_ErrInterruptHandle+0x20>
    {
        temp = pSPIHandle->pSPIx->DR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	73fb      	strb	r3, [r7, #15]
        temp = pSPIHandle->pSPIx->SR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	73fb      	strb	r3, [r7, #15]
    }
    (void)temp;

    /* Inform application */
    SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000c36:	2103      	movs	r1, #3
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 f804 	bl	8000c46 <SPI_ApplicationEventCallback>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <SPI_ApplicationEventCallback>:
/*
* Application callback
*/
void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEvent){
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	70fb      	strb	r3, [r7, #3]

}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <delay>:
#include "stddef.h"

#define BTN_PRESSED 0

void delay(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < 500000; i++);
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	e002      	b.n	8000c72 <delay+0x12>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <delay+0x28>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d9f8      	bls.n	8000c6c <delay+0xc>
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	0007a11f 	.word	0x0007a11f

08000c8c <SPI2_GPIOInits>:

// Declare SPI Handle Globally
SPI_Handle_t SPIHandle;

void SPI2_GPIOInits(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;
    SPIPins.pGPIOx = GPIOB;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <SPI2_GPIOInits+0x58>)
 8000c94:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000c96:	2302      	movs	r3, #2
 8000c98:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	72bb      	strb	r3, [r7, #10]

    /* SCLK Init */
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000caa:	230d      	movs	r3, #13
 8000cac:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fb51 	bl	8000358 <GPIO_Init>

    /* MOSI Init */
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fb4b 	bl	8000358 <GPIO_Init>

    /* MISO Init */
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000cc2:	230e      	movs	r3, #14
 8000cc4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb45 	bl	8000358 <GPIO_Init>

    /* NSS Init (for Hardware NSS) */
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb3f 	bl	8000358 <GPIO_Init>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <SPI2_Inits>:

void SPI2_Inits()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    SPIHandle.pSPIx = SPI2;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <SPI2_Inits+0x48>)
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <SPI2_Inits+0x4c>)
 8000cf0:	601a      	str	r2, [r3, #0]
    SPIHandle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <SPI2_Inits+0x48>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	715a      	strb	r2, [r3, #5]
    SPIHandle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <SPI2_Inits+0x48>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	711a      	strb	r2, [r3, #4]
    SPIHandle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16; // Reduce Speed for Debugging
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <SPI2_Inits+0x48>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	719a      	strb	r2, [r3, #6]
    SPIHandle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <SPI2_Inits+0x48>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	71da      	strb	r2, [r3, #7]
    SPIHandle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <SPI2_Inits+0x48>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	721a      	strb	r2, [r3, #8]
    SPIHandle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <SPI2_Inits+0x48>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	725a      	strb	r2, [r3, #9]
    SPIHandle.SPIConfig.SPI_SSM = SPI_SSM_DI;  // Enable Hardware NSS
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SPI2_Inits+0x48>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	729a      	strb	r2, [r3, #10]

    SPI_Init(&SPIHandle);
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <SPI2_Inits+0x48>)
 8000d1e:	f7ff fd39 	bl	8000794 <SPI_Init>
    SPI_SSOEConfig(SPI2, ENABLE);  // Enable Automatic NSS Control
 8000d22:	2101      	movs	r1, #1
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <SPI2_Inits+0x4c>)
 8000d26:	f7ff feac 	bl	8000a82 <SPI_SSOEConfig>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000001c 	.word	0x2000001c
 8000d34:	40003800 	.word	0x40003800

08000d38 <main>:

int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
    char user_data[] = "HUY";
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <main+0x64>)
 8000d40:	607b      	str	r3, [r7, #4]

    /* Initialize GPIO pins to behave as SPI2 pins */
    SPI2_GPIOInits();
 8000d42:	f7ff ffa3 	bl	8000c8c <SPI2_GPIOInits>

    /* Initialize SPI2 peripheral parameters */
    SPI2_Inits();
 8000d46:	f7ff ffcf 	bl	8000ce8 <SPI2_Inits>

    /* Enable SPI */
    SPI_PeripheralControl(SPI2, ENABLE);
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4814      	ldr	r0, [pc, #80]	; (8000da0 <main+0x68>)
 8000d4e:	f7ff fe7c 	bl	8000a4a <SPI_PeripheralControl>

    /* Enable SPI Interrupt */
    SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);
 8000d52:	2101      	movs	r1, #1
 8000d54:	2024      	movs	r0, #36	; 0x24
 8000d56:	f7ff fda5 	bl	80008a4 <SPI_IRQInterruptConfig>

    while (1)
    {
        // Send data in Interrupt Mode
    	GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_12, SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	210c      	movs	r1, #12
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <main+0x6c>)
 8000d60:	f7ff fc82 	bl	8000668 <GPIO_WriteToOutputPin>
        if (SPIHandle.TxState != SPI_BUSY_IN_TX)
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <main+0x70>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d009      	beq.n	8000d80 <main+0x48>
        {
            SPI_SendDataInterruptMode(&SPIHandle, (uint8_t*)user_data, strlen(user_data));
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa30 	bl	80001d4 <strlen>
 8000d74:	4602      	mov	r2, r0
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <main+0x70>)
 8000d7c:	f7ff fd6e 	bl	800085c <SPI_SendDataInterruptMode>
        }

        // Wait until SPI transmission is complete
        while (SPIHandle.TxState == SPI_BUSY_IN_TX);
 8000d80:	bf00      	nop
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <main+0x70>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d0fb      	beq.n	8000d82 <main+0x4a>
        GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_12, RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210c      	movs	r1, #12
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <main+0x6c>)
 8000d90:	f7ff fc6a 	bl	8000668 <GPIO_WriteToOutputPin>
        // Small delay
        delay();
 8000d94:	f7ff ff64 	bl	8000c60 <delay>
    	GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_12, SET);
 8000d98:	e7df      	b.n	8000d5a <main+0x22>
 8000d9a:	bf00      	nop
 8000d9c:	00595548 	.word	0x00595548
 8000da0:	40003800 	.word	0x40003800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	2000001c 	.word	0x2000001c

08000dac <SPI2_IRQHandler>:
    return 0;
}

/* SPI2 Interrupt Handler */
void SPI2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    SPI_IRQHandling(&SPIHandle);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <SPI2_IRQHandler+0x10>)
 8000db2:	f7ff fdfd 	bl	80009b0 <SPI_IRQHandling>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000001c 	.word	0x2000001c

08000dc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dc4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dee:	f000 f811 	bl	8000e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff ffa1 	bl	8000d38 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   r0, =_estack
 8000df8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e04:	08000e7c 	.word	0x08000e7c
  ldr r2, =_sbss
 8000e08:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e0c:	20000040 	.word	0x20000040

08000e10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <__libc_init_array>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	4d0d      	ldr	r5, [pc, #52]	; (8000e4c <__libc_init_array+0x38>)
 8000e18:	4c0d      	ldr	r4, [pc, #52]	; (8000e50 <__libc_init_array+0x3c>)
 8000e1a:	1b64      	subs	r4, r4, r5
 8000e1c:	10a4      	asrs	r4, r4, #2
 8000e1e:	2600      	movs	r6, #0
 8000e20:	42a6      	cmp	r6, r4
 8000e22:	d109      	bne.n	8000e38 <__libc_init_array+0x24>
 8000e24:	4d0b      	ldr	r5, [pc, #44]	; (8000e54 <__libc_init_array+0x40>)
 8000e26:	4c0c      	ldr	r4, [pc, #48]	; (8000e58 <__libc_init_array+0x44>)
 8000e28:	f000 f818 	bl	8000e5c <_init>
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	10a4      	asrs	r4, r4, #2
 8000e30:	2600      	movs	r6, #0
 8000e32:	42a6      	cmp	r6, r4
 8000e34:	d105      	bne.n	8000e42 <__libc_init_array+0x2e>
 8000e36:	bd70      	pop	{r4, r5, r6, pc}
 8000e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e3c:	4798      	blx	r3
 8000e3e:	3601      	adds	r6, #1
 8000e40:	e7ee      	b.n	8000e20 <__libc_init_array+0xc>
 8000e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e46:	4798      	blx	r3
 8000e48:	3601      	adds	r6, #1
 8000e4a:	e7f2      	b.n	8000e32 <__libc_init_array+0x1e>
 8000e4c:	08000e74 	.word	0x08000e74
 8000e50:	08000e74 	.word	0x08000e74
 8000e54:	08000e74 	.word	0x08000e74
 8000e58:	08000e78 	.word	0x08000e78

08000e5c <_init>:
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	bf00      	nop
 8000e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e62:	bc08      	pop	{r3}
 8000e64:	469e      	mov	lr, r3
 8000e66:	4770      	bx	lr

08000e68 <_fini>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	bf00      	nop
 8000e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6e:	bc08      	pop	{r3}
 8000e70:	469e      	mov	lr, r3
 8000e72:	4770      	bx	lr
